Wechat 开发

Day02 公众号开发

1. 开发者模式

2. 使用 Node.js 和 Express 搭建一个简单的服务器
	2.1 创建目录 Wechat-1710N

	2.2 Wechat-1710N/ 创建目录
	    server-official-account

	2.2 server-official-account/
	    cmd: npm init

3. server-official-account/
   cmd: npm i -S express

—— 以上操作如无网络，下载解压：FTP/22-wechat/day01/wechat-1710N.zip

4. server-official-account/
   创建 app.js，搭建一个简单的 web 服务器
	const express = require('express');
	let app = new express();
	app.listen(3000);

5. server-official-account/
   cmd: node app | supervisor app
   supervisor: npm i -g supervisor

6. 隧道服务
   cmd: npm i -g ngrok
   ngrok http 3000

   https://ngrok.com/download
   C:/ngrok.exe
   C:/ cmd: ngrok.exe http 3000

   MAC
   https://ngrok.com/download
   ngrok.zip
   ngrok
   ~/Download/
   ./ngrok http 3000

7. server-official-account/
   cmd: npm i -S wechat

8. app.js
   const wechat = require('wechat');
   let config = {
        appid: '',
        token: '',
        encodingAESKey: ''
   };

9. 微信公众平台 - 登录个人订阅号账号
   开发 - 基本配置
   复制 AppId，粘贴为 config 的 appid 值

10. 开发 - 基本配置
    服务器配置(未启用) - 修改配置
    10.1 token: weixin
         设置 config 的 token 值为 weixin
    10.2 生成 EncodingAESKey
         设置 config 的 encodingAESKey 值为生成值

11. 复制 ngrok 生成的隧道地址，填写到公众平台的 URL 处

12. app.js
    app.post('/', wechat(config, (req, res) => {
        let message = req.weixin;
        console.log(message);
    }));

13. 开发 - 基本配置
    服务器配置(未启用) - 修改配置
    提交

14. 启用开发者模式
    服务器配置(已启用)

15. 手机微信里，向自己的订阅号发送任意消息，观察服务器输出

16. 如果订阅号服务器在接收到消息后，没有返回响应，微信服务器会再重发两次消息，最后向用户发送消息：该公众号提供的服务出现故障，请稍后再试

17. 返回响应
    res.reply('text');

18. 模拟编辑模式的关键词半匹配回复？
    -> JavaScript | HTML | CSS
    -> http://...

19. 聊天机器人
    用户向订阅号发送消息
    服务器端接受消息
    服务器根据接受的消息返回响应

20. server-official-account/
    cmd: npm i -S mysql

21. server-official-account/
    创建文件 sql/db.sql

22. app.js
    const mysql = require('mysql');
    let pool = mysql.createPool({user: 'root'});

23. let sql = 'SELECT * FROM db.chat WHERE ? like concat('%', question, '%')';
    pool.query(sql, [content], (err, results)=>{// ...});



